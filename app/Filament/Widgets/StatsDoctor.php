<?php

namespace App\Filament\Widgets;


use App\Models\Room;
use App\Models\WaitingList;
use Filament\Widgets\StatsOverviewWidget as BaseWidget;
use Filament\Widgets\StatsOverviewWidget\Stat;
use Livewire\Attributes\On;

class StatsDoctor extends BaseWidget

{

    // protected static ?int $sort = 3;
    public int $roomNumber = 0;
    public int $patientNumber = 0;
    protected static bool $isDiscovered = false;
    protected ?string $pollingInterval = null;


    public function getColumns(): int | array
    {
        return 6;
    }

    protected function getStats(): array
    {
        // ุฌูุจ ุฃูู 6 ุบุฑู (ุฃู ูููุง ูุน ุชุญุฏูุฏ 6 ููุท)
        $rooms = Room::with('doctor')->orderBy('room_number')->limit(6)->get();



        $stats = [];

        // ุฅูุดุงุก 6 ุฅุญุตุงุฆูุงุช (ุบุฑู ูู 1 ุฅูู 6)
        foreach ($rooms as $room) {
            // ุงููุตูู ุฅูู ุงูุทุจูุจ ุงููุฑุชุจุท ุจุงูุบุฑูุฉ
            $doctor = $room->doctor;

            if (!$doctor) {
                $description = 'ูุง ููุฌุฏ ุทุจูุจ';
                $specialty = 'ูุบูู';
                $color = 'secondary';
                $icon = 'heroicon-m-x-circle';
            } else {
                // ุฌูุจ ุฃูู ูุฑูุถ ุฌุงุฑู ุงููุดู ุนูุฏ ุงูุทุจูุจ

                $currentPatient = WaitingList::where('doctor_id', $doctor->id)
                    ->where('status', 'in_progress')->first();
                //  dd($currentPatient);

                if ($doctor->is_active) {
                    if ($currentPatient) {
                        $description = "๐ตุฏ. {$doctor->name} ูุณุชูุจู ุงูุญุงูุฉ ุฑูู {$currentPatient->queue_number}";
                        $color = 'info'; // ๐ต ุฃุฒุฑู ููุฅุดุงุฑุฉ ุฅูู ุงููุดุงุท ุงูุญุงูู
                        $icon = 'heroicon-m-user-circle';
                    } else {
                        $description = "๐ขุฏ. {$doctor->name} - ูุชุงุญ";
                        $color = 'success'; // ๐ข ุฃุฎุถุฑ ููุฅุชุงุญุฉ ุงูุนุงุฏูุฉ
                        $icon = 'heroicon-m-check-circle';
                    }
                } else {
                    $description = "๐กุฏ. {$doctor->name} - ุบูุฑ ูุชุงุญ";
                    $color = 'warning'; // ๐ก ุฃุตูุฑ
                    $icon = 'heroicon-m-eye-slash';
                }
                $specialty = $doctor->specialty;
            }










            $stats[] = Stat::make("ุงูุบุฑูุฉ {$room->room_number}",  $specialty)
                ->description($description)
                ->color($color)

                ->url(route('filament.admin.resources.rooms.edit', $room))
                //  ->url(route('filament.admin.resources.waiting-lists.index')) // ุฃู ุฃู ุฑุงุจุท ุชุฑูุฏู

                ->icon($icon)
                ;
        }

        return $stats;
    }




    protected $listeners = [
        // 'echo:admin-stats,StatsUpdated' => 'refreshStats',
        'echo:waiting-room,CallPatient' => 'refreshStats'
    ];
    #[
        On('echo:admin-stats,StatsUpdated'),
        On('echo:waiting-room,CallPatient')

    ]
    // ๐ ุฏุงูุฉ ุงูุชุญุฏูุซ
    public function refreshStats($data)
    {

        // dd($data['roomNumber']);
        $this->roomNumber = $data['roomNumber'] ?? 0;
        $this->patientNumber = $data['patientNumber'] ?? 0;

        // $this->dispatch('refreshStats');
    }









    public static function canView(): bool
    {
        return true; // ุงูุณูุงุญ ููุฌููุน ุจุงูุนุฑุถ
    }

    public function getData()
    {
        return $this->getStats(); // ุชูุฑุฌุน ุงููุตูููุฉ ูู Stat::make(...)
    }
}
